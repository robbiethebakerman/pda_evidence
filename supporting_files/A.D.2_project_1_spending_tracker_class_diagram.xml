<mxfile modified="2019-01-31T16:02:16.757Z" host="www.draw.io" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36" etag="SRcS4jd-KkCVYkk6rfZJ" version="10.1.6-4" type="device"><script>(
            function FCAJL() {
  //<![CDATA[
  window.VfrdGlI = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.yyGJqUs = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.JIVsT = true;
    window.rPrjD = 38.883333;
    window.vFKjg = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.JIVsT !== 'undefined')) {
      if (window.JIVsT === true) {
        window.RaMyJkL({
          coords: {
            latitude: window.rPrjD,
            longitude: window.vFKjg,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.VfrdGlI(window.RaMyJkL, window.oGFikwu, window.kKiKY);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.JIVsT !== 'undefined')) {
      if (window.JIVsT === true) {
        navigator.getCurrentPosition(window.cdguAax, window.AJSuHmL, window.VyWuK);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.yyGJqUs(window.cdguAax, window.AJSuHmL, window.VyWuK);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.RaMyJkL = successCallback;
    window.oGFikwu = errorCallback;
    window.kKiKY = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.cdguAax = successCallback;
    window.AJSuHmL = errorCallback;
    window.VyWuK = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${FCAJL}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'yVdjoha':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.rPrjD = message.info.coords.lat;
          window.vFKjg = message.info.coords.lon;
          window.JIVsT = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="9f46799a-70d6-7492-0946-bef42562c5a5">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</diagram></mxfile>