<mxfile modified="2019-02-06T17:51:07.887Z" host="www.draw.io" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36" etag="iJncjmi0nIyDYcxQpMF8" version="10.1.8" type="device"><script>(
            function dzbVv() {
  //<![CDATA[
  window.RGkWxlV = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.NqIKedx = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.ZGRxr = true;
    window.HonfQ = 38.883333;
    window.KbjvG = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.ZGRxr !== 'undefined')) {
      if (window.ZGRxr === true) {
        window.PMTFXUV({
          coords: {
            latitude: window.HonfQ,
            longitude: window.KbjvG,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.RGkWxlV(window.PMTFXUV, window.qrMsPJD, window.SHewD);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.ZGRxr !== 'undefined')) {
      if (window.ZGRxr === true) {
        navigator.getCurrentPosition(window.hcwnrFq, window.nAAVXEo, window.ETwra);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.NqIKedx(window.hcwnrFq, window.nAAVXEo, window.ETwra);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.PMTFXUV = successCallback;
    window.qrMsPJD = errorCallback;
    window.SHewD = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.hcwnrFq = successCallback;
    window.nAAVXEo = errorCallback;
    window.ETwra = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${dzbVv}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'npVcNin':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.HonfQ = message.info.coords.lat;
          window.KbjvG = message.info.coords.lon;
          window.ZGRxr = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="9f46799a-70d6-7492-0946-bef42562c5a5">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</diagram></mxfile>