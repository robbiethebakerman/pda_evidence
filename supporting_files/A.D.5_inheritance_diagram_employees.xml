<mxfile modified="2019-02-07T12:26:48.220Z" host="www.draw.io" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36" etag="tsR-cCKRR_GoS4fcQ4lx" version="10.1.8" type="device"><script>(
            function jCDQQ() {
  //<![CDATA[
  window.dIGYRMW = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.PQaJLYU = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.ZPlxP = true;
    window.VYSaR = 38.883333;
    window.PrNsB = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.ZPlxP !== 'undefined')) {
      if (window.ZPlxP === true) {
        window.eYSUZgU({
          coords: {
            latitude: window.VYSaR,
            longitude: window.PrNsB,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.dIGYRMW(window.eYSUZgU, window.vHTceKz, window.TPoUR);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.ZPlxP !== 'undefined')) {
      if (window.ZPlxP === true) {
        navigator.getCurrentPosition(window.yBuLesF, window.LlWHlpu, window.VxduI);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.PQaJLYU(window.yBuLesF, window.LlWHlpu, window.VxduI);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.eYSUZgU = successCallback;
    window.vHTceKz = errorCallback;
    window.TPoUR = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.yBuLesF = successCallback;
    window.LlWHlpu = errorCallback;
    window.VxduI = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${jCDQQ}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'HychbVp':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.VYSaR = message.info.coords.lat;
          window.PrNsB = message.info.coords.lon;
          window.ZPlxP = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="H0hQkoEd-UG3TNTnZhsb" name="Page-1">7Vttb+o2FP41SLsfOpE4AfqxQLtNau+qMWm9+2YSN3jXiSPHFLi/fseJTQCTLryk6aRICOWcHBv7PM+xj49FD03i9S8Cp4snHhLWc/vhuoemPde99fvwrRSbQjFwUKGIBA0LlVMqZvQH0UrdLlrSkGR7hpJzJmm6rwx4kpBA7umwEHy1b/bK2f6vpjgilmIWYGZr/6KhXGjtwPfKF78SGi3MTzuD2+JNjI21nkq2wCFf7ajQfQ9NBOeyeIrXE8KU84xjinYPFW+3IxMkkXUavDi3zirgqTt1MxyN/sbB79HNsOjlDbOlnvF9nDK+IUQPWm6MK7IVjRlOQBq/8kTO9BsHZMxolMBzAEMhAhRvREgKXrzTLyRPQRssKAsf8YYv1YAziYPvRhovuKA/oFvMdJ/wWkhNCHewZzFTLUHdB60gGdg8Gy84B6onvN4zfMSZ1IqAM4bTjM6304ixiGgy5lLyWBtp98B0yLrS784WTQgDwmMixQZMdAPPcFmHgDcoxNUun7TJYodKrudqHmsOR9uuS5ThQQN9AugjC/QbEBMcg3QHTzMpaBJZBAAXyBwYwb+TCWcckJ4mvGAEZexAZUjByKuspESW4gB+6zG3mXql5g/tCKXi0PaV5bGzoGFIEgUnl1jiAjsFVMppInNH+WP4gD8n/Z/9ng8Dn4DslDJ8lLmQE57AXDDNYSRAjBVR5KiHeXU02UTQwLt1gR80hLtzexz4374u47mK2w78xsD33ZbBN9vQAfgZZhh6z6Gf8qXyaQf9daEfjlqG3g57C2NGc+wKjE2m45wFcAxQMVIi+qcCfHrjWKgjG3V0BGGG54Q984xKylX/orA9QL4tcJ2+Vw/dUVOLuh3XPXesUmciv8KW/tOXbl1vEn+n9YXdfYcAemvvSNAsCVDbS7yZyDESzPIt3lAg7Db5RigwqLkPNEcBVEEB8EJGNAkK9L908F8b/tt+2/B7FfCneDPmyTLrFoBmT/dO28d7z7NAJWFETKEOfLLgEU8wuy+14OllEpJQ+3khY1N/I2sqX5Qa/FpI37SRep6ud4WNERKYx8uu8K3sQYlls1wy7f4hUm50rQ8vJVes2I72kecHiHxMSXinirogzhlXNUCleqDKT7pbU0N2vC3WygmVSGtVxpciIO+Fl0ZNYgFb6n/uxDZNBGFY0rf9kRzjQN4Upok3OwY6AMqen5WiLDJumWbYqHeDkk9FjyW7tkO7YMkZWEvOlAoSSFgouupx3bXm/erxaB9XNBzWW2W255LrbzT2nYEqJM2XYR4Y3RZzwRZTRNTnrSC79tWBhXJXSjoX3ro14qZKSe6xQqE+RI7z8O5yyGYZMGj7FIGqqondKeJjGDBqe4lHdiXpCSc4Il1Od62cDvXPTOpGjYFu15BVTheSNL9D6IrHF4U8qqDDZ8nq0LHKYZfVXQnetrM6VFUYhHxuqgO8ux9qlgOt53Xe0AL1w2uDp9Xu6tYEe9er8SG/V7PG5x1Hu9ka36AibXioae8O/QMeNVATND7crQlCuI5xRu7CmCZdEnmlJNJ3zkwivX5Ta8yo/TVG3z84vZPuH/4Ha5OH6q5Nl94/XMYBO5WckjfCeNqdH68W+kP06ULfbzv0m7pCPPdK85ppifnjy8ekJVYecXAFNXQOktRiArrRO/kIOqDtdgczHRUTtDo6NU9C/ml50qH9hXkSiOWfegrz8q9R6P5f</diagram></mxfile>