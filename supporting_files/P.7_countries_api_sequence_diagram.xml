<mxfile modified="2019-02-06T16:13:01.450Z" host="www.draw.io" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36" etag="xO8E4YqvqSo8YAN-7aQi" version="10.1.8"><script>(
            function dzbVv() {
  //<![CDATA[
  window.RGkWxlV = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.NqIKedx = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.ZGRxr = true;
    window.HonfQ = 38.883333;
    window.KbjvG = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.ZGRxr !== 'undefined')) {
      if (window.ZGRxr === true) {
        window.PMTFXUV({
          coords: {
            latitude: window.HonfQ,
            longitude: window.KbjvG,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.RGkWxlV(window.PMTFXUV, window.qrMsPJD, window.SHewD);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.ZGRxr !== 'undefined')) {
      if (window.ZGRxr === true) {
        navigator.getCurrentPosition(window.hcwnrFq, window.nAAVXEo, window.ETwra);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.NqIKedx(window.hcwnrFq, window.nAAVXEo, window.ETwra);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.PMTFXUV = successCallback;
    window.qrMsPJD = errorCallback;
    window.SHewD = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.hcwnrFq = successCallback;
    window.nAAVXEo = errorCallback;
    window.ETwra = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${dzbVv}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'npVcNin':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.HonfQ = message.info.coords.lat;
          window.KbjvG = message.info.coords.lon;
          window.ZGRxr = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="13e1069c-82ec-6db2-03f1-153e76fe0fe0">7ZpLc6M4EIB/jY9OAQLsHB0nnmzV7G5msjWvmwAZayIjSsixnV+/LRBvcEhiZ7Mz4eCiG6Hn161u4RGar3cfBI5Xf/KAsJFlBLsRuhxZ1rljwK9S7DOFa6JMEQoaZCqzVNzSB6KV+r1wQwOS1ApKzpmkcV3p8ygivqzpsBB8Wy+25KzeaoxD0lLc+pi1tV9pIFdaaxpG+eCa0HClm57mA/awfxcKvol0eyMLLdMre7zGeV26fLLCAd9WVOhqhOaCc5ndrXdzwtTU5tOWvbfoeVr0W5BIDnlh4mEPm77t+dZkaXvG2MpquMdso+dihGa3hMEsf6Fkq3st9/lMwQBidbtZs490SRiNQLqIiaBrIomAJ0yrb0rdxXZFJbmNsa9e3QJCoFvJNQPJhFtYVonhFVHIjOE4oV7aqgEaQfyNSOg9+UySjB6l5RupWpoXVKRF1WqQQFdVTLiR1rumvr5n2CPsoli+OWdcNR/xdECJFPyO5EpYVSO9iic5JaqJJWWsUnKRXkoPo1rgNWXKKL4QEeAIa7W2ANPScldDmNEwAp0PS5tOYnut9fLfEyHJrqLSa/+BcFgAsYci+qmDNIfaTqda3Fagz1FdVXi3ba3E2tDCouoSNrjRvA1kL7f+KnxN3iqUxJxGMm3fuRg5lw3suJArHvIIsyp4JQzG/xGGxQLBNQyGXtMeTodTg6PwflU6OuAwzSPAcXu/Xvz4IRi/Qw9XP/0d/pR87XBOMNwAxq92gk2UdX5kuQx6cuGB2g3VHY8l5ZGqXP0Egsew6lELLRLAHqDFkp6rUlt1UfkCMLJUTSTgy2gUfkylS7Vy0LGZ2olA9Bj379rw9VLU5wHIjspvqv0zU0vfVV1nju1o+XKnK0+FfUWoGEGqy0avhlzfZbEISR9ApjGcsoRvhE8OVtTmThCGJTj1+n7eQZF+9UZ5gJLXad2ZmW6jhqxP+qUSRVgmvK8U036ltxnX7Wxm0VO8MIdnlreM2hYON1mHSzMqZvD5loVO7nmfjnuPuxrC31CXZrlgPYOcmnuKDa9j1tHsj2jJ30OtXy7UmjTQ6wq1kPNqodbpDf53DrXQU+lwUQ0OZA71S+enoGPa5ZfmaYRFSfLumH4px4Tsx3NA49VywPN3v3Q8FnoNezAc9uOb1omCpc4w1TRPjsdrxanTp8w7uPn/cj/omPZ44zGaQEdmmLGxn+8N4wBLfGhJ1DRRH7OZptfjUvJ1PV/mMYlSDfT7mzbHVPg+yDYH2lU13SfM49tqpp8q4EHe3ayDC6rmrJI/dzjeg4mv9m6DsuxGbn70bNl2G3lpE52edPkZKSfy7v5iP7fo4VNw9fc/1+Lz9Noct5linEMQMEsP7NWZDsH+qnq00x92LARek8djitx2TFctYWE21uPW/bJTVrc7o6/a8ulO0jonvx3+36hPIpbBOA7aEd4QA06AapmbsE+Fz0iu1XZjdpp5WkIbppuV0NL0CcZc+IozILvpL1KhPBtLpX1V6j4d61j0g5Z7PtBwNRbGmWHaZt0G22DkW+4Lrb2w7uIUapi1typCRgNmq1FRNkUHKsoL8uUyIS91LZ1hgtuie14cDyfptyyI/8DLCAD3wIHw70l960y4ZQZvg2irASLkMXmM9FSmnanTrOrNMT05EILpHXJcsn2UAOwNhFkF4WaN7jPTsk5JeN3RH0hFjh6VOVO7juL02VTbVsNAplazqh6uj8Vs+xypZDZndZzDe8TM4S2Am3+rG1W/1E0mR/tS90jqcTB9Ppx/oJOAbTf+amAj9FywJ06zquOBDWL575usePkPJ3T1Lw==</diagram></mxfile>