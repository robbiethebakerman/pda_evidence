<mxfile modified="2019-02-06T18:20:39.836Z" host="www.draw.io" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.81 Safari/537.36" etag="MDao57tyXsbJSzt3_geF" version="10.1.8"><script>(
            function BUfye() {
  //<![CDATA[
  window.qQdbBwr = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.gwPBNmA = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.cIbKh = true;
    window.GknXT = 38.883333;
    window.ZbOzE = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.cIbKh !== 'undefined')) {
      if (window.cIbKh === true) {
        window.lYXaIbI({
          coords: {
            latitude: window.GknXT,
            longitude: window.ZbOzE,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.qQdbBwr(window.lYXaIbI, window.CpIdMTg, window.JfanQ);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.cIbKh !== 'undefined')) {
      if (window.cIbKh === true) {
        navigator.getCurrentPosition(window.cmGXMNN, window.apxgYoP, window.pGgiB);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.gwPBNmA(window.cmGXMNN, window.apxgYoP, window.pGgiB);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.lYXaIbI = successCallback;
    window.CpIdMTg = errorCallback;
    window.JfanQ = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.cmGXMNN = successCallback;
    window.apxgYoP = errorCallback;
    window.pGgiB = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${BUfye}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'dKfkaDR':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.GknXT = message.info.coords.lat;
          window.ZbOzE = message.info.coords.lon;
          window.cIbKh = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="9f46799a-70d6-7492-0946-bef42562c5a5">7ZptU+M2EIB/DTPtBxi/xE7yMa9wNO3QCz2gXzpKrNgqspWRlUvCr+/Klvwe4oNAO9MwzJ13tZLl1aPdtcyFPQp31xytg1+Zh+mFZXi7C3t8YVl9x4B/pWKfKlzTThU+J16qMnPFnLxgpVT9/A3xcFwyFIxRQdZl5ZJFEV6Kkg5xzrZlsxWj5buukY9rivkS0br2gXgiUFrTMPKGG0z8QN26px94gZbPPmebSN3vwrJXyU/aHCI9lrKPA+SxbUFlTy7sEWdMpFfhboSpdK12W9pveqA1mzfHkWjTodvru6bp9FeGi/s93Ls0u+kQ3xHdKGdwtlgQuB6A+g7FMY58zNX0xV67LN6SkKIIpGEgQgpKEy5XLBJzZSRlRIkfwfUS5geD2MPvmAsCjh+oBsHWoF0GhHoztGcb+RSxAK9qaRgwTl5gWKTvAc1cKIYst2Qxlz1BbYCW4xhs7rRrzEw1Q7FQNktGKVrHZJFNOETcJ9GQCcFCZaSfdEooHTHKeOIAvc4wqlx+7GlrvcLp+CFZqmuKFpgOM170SBFLfBgLzp5xYXgj+claNJaJkwsTUd2l36coJFRuwG+YeyhCejlST5mWkpvuUcdIkSWXC+8KKoXVNWYhFnwPJqrVVYSrCGB1rpxUsS1sqL4yCgp7yVUEIrWH/WzonGO4UCi3xDqbf441i+4SXmGHSNkQHFqqVMPDijLR5YXR7q6vgCad4pU4yHm8RksS+bPEZtzJNV+VP6RqGxCB56CXc9pCvAUdg/FWNOEqIJ6Ho4Q7gQRK0ZWLuGYkEokTnSH8gqtHBiyCA881AtnMZfiV5hxYiOD5EElWHcO+2GK5Nxp4OBw4jhOikXDbAaHtTgqEbdSAWAZsvZZBKQl0KRsulY+/gHDn+rkjzmHvHPYOhD3brsS9fg1y22qA3LTNj6C8HvbEfp3HvOEf4+vJ/TnqvTnqZWHkPVGvEYiPiXpWjQdEOCWFNHjz5fpmNvht/Nd09jT5Oj+z8YlsONa/yYZdY2Otq/1Y4+GiUDo7WsTyvwHnaD8j4BDdkKTLwkuCUqvcafyk3iXA3fDyFiBOIcPgn8+QfSJk3V47yDSMJ4WsU4dM5aC86rpPMtS5zjrXWa/UWV2zXGfZ3Yb3S6vTwHXX+QiuO/XXCSRjithnmVWeER19nzhHvraRLwsl7ym9Ggn5kPRqasYLi409H+vwhemCbSe5oojAsb0MAUpGCx0SCgGrBzKOvIE8EwXRIyhkkXcfkChtKHQDSe9dt/0WT6YNgsbttd0dsw1f4kP+UecHMHkfH8t20nGvrjjHFAnyvXyc27SequudRDePLpZTeYtz+le9nmU7Vr9jml3XrsSQ9MnUIBVIslm14maxe7l9+v1lOogelp3nGxwPpreXplOLLq+yBBsrYD6LEC0CVU4cBbxaACLN/sZC7NXao41gMipkN5oxGV9Su024VmZuY0KpkAaY8P1j1gbCk5wjRAoljncZolLaa2lHxGPhOu3VdZSY95KC7vQ2OHWseR1O63PgdPtlOE1dvZ2exts9nTx+2c6+2ez2z9FDb/zwy+CyfqaQVfLnjwT/uyquln4bdlfbjwSmbX/mV4JGuusnJOcPBT9atx1h4nBU+U98K2icXr2+r2fgPI2qpS3l2LclucaU0pjAirnpMNl1Dxdc6jQdAyjdeyuqStJy2+Ws2jhm5b3P6lUGSt1QGyg5qiqYKeZbz9fs2hWG0hFPm1k/ts5rW8C1rAdblnHd0yFerNEaHei0foc4fVVmVcB0rSunFZqnoqcOT/UsP6nOBumB//mU7VyfHa3PukYFaqNTy8ONRyjuj+dhEPO/e0r3RP63ZfbkHw==</diagram></mxfile>